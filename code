//Include relevent libraries and files for light sensor and Wifi
#include <BH1750.h>
#include <Wire.h>
#include <SPI.h>
#include <WiFiNINA.h>
#include "secrets.h"
void sendNotif(); // Function that triggers event and sends notification
char ssid[] = SECRET_SSID; //SSID for Wifi connection
char pass[] = SECRET_PASS; //Password for Wifi connection
//Define Wifi client 
WiFiClient client;
//IFTTT details for event and to send notifications
char   HOST_NAME[] = "maker.ifttt.com";
String PATH_NAME   = "/trigger/event_trigger/with/key/diV95Kkwlv38KjPMKlUS4T"; // change your EVENT-NAME and YOUR-KEY
String queryString = "?value1=57&value2=25";

BH1750 lightMeter(0x23);
//Declare boolean for lightState
bool lightState;

void setup() {
  //Begin serial adn Wifi connection
  Serial.begin(9600);
  WiFi.begin(ssid, pass);

  // Initialize the I2C bus
  Wire.begin();
  
  while (!Serial);

  // connect to web server on port 80:
  if (client.connect(HOST_NAME, 80)) 
  {
    // if connected:
    Serial.println("Connected to server");
  }
  else {// if not connected:
    Serial.println("connection failed");
  }

  // begin returns a boolean that can be used to detect setup problems.
  if (lightMeter.begin(BH1750::CONTINUOUS_HIGH_RES_MODE)) 
  {
    Serial.println(F("BH1750 Advanced begin"));
  } else 
  {
    Serial.println(F("Error initialising BH1750"));
  }
  
  //InitiLizes bool for lightState, if more than 80lx, then it's true
  float initialLux = lightMeter.readLightLevel();
  lightState = initialLux > 80;
}

void loop() {
  //Prints light measurement onto serial monitor
  if (lightMeter.measurementReady()) 
  {
    float lux = lightMeter.readLightLevel();
    Serial.print("Light: ");
    Serial.print(lux);
    Serial.println(" lx");
    //If light is below 50lx and lightState is true, notification will be sent
    if (lux < 50 && lightState) 
    {
      sendNotif();
      lightState = false;  
    }
  //if lux is above 80lx and lightState is false, notification will be sent
    else if (lux > 80 && !lightState)
    {
        sendNotif();
        lightState = true;
    }
  
}
}

void sendNotif(){
{
    //Connect to server on port 80
    if (client.connect(HOST_NAME, 80)) 
    {
    // send HTTP header
    Serial.println("Connected to server");
    client.println("GET " + PATH_NAME + queryString + " HTTP/1.1");
    client.println("Host: " + String(HOST_NAME));
    client.println("Connection: close");
    client.println(); // end HTTP header


    while (client.connected()) 
    {
      if (client.available()) 
      {
        // read an incoming byte from the server and print it to serial monitor:
        char c = client.read();
        //Print the network details indicating successful trigger of event
        Serial.print(c);
      }
    }

    // the server's disconnected, stop the client:
    client.stop();
    Serial.println();
    Serial.println("disconnected");
    //delay 5 seconds before next reading
    delay(10000);
    }
  else 
  {
    // if not connected:
    Serial.println("connection failed");
  }
  }

}

